step by step:
1.Cretate CartItem table and entity
2.Create CartItem Repo (JPA interface)
 -findByCustomer
3.ShoppingCart service
 -add/remove/updateQuantity product to cart via customer
4.Shopping CartController/RestController

curl with verbose mode on:
GET curl -v http://localhost:8080/shopmeadmin/rest/users
curl 'https://til.hashrocket.com/api/developer_posts.json?username=gabrielreis' | json_pp -> pretty json
POST with request body (in linux replace '^' by '\'
curl -d "{\"email\":\"testcurl@yahoo.com\",\"password\":\"4444\",\"firstName\":\"abc\",\"lastName\":\"xyz\"}" -H "Content-Type: application/json" ^
    http://localhost:8080/shopmeadmin/rest/users/save
DELETE curl -X DELETE http://localhost:8080/shopmeadmin/rest/users/delete/9

Step:
1.Create root project as maven(gradle project)
2.Create ShopmeCommon project with spring init (JPA) and set module to root project (library project)
3.Create shopme-web-parent project - common dependencies between BE and FE (spring-web)
    3.1 Create shopme backend
    - set parent project by group/atifart/version of web-parent
    3.2 Create shopme frontend
    - set relative path if have error
4. Create Admin Home Page (GUI) (do it later)
5. Role entity, role repo and unit test
    5.1. Add shopcommon as dependency to web-parent
6. User entity, User repo and unit test
    6.3 create user with 2 roles
    6.4 overridde hashCode and equals of Roles to avoid add the same role to Set
7. Create User Listing function (lecture 27)
    7.1 Create controller/service
    curl -v http://localhost:8080/shopmeadmin/rest/users
    7.2 xxx Create GUI (not done)
8. Create New User Function (lecture 28)
    8.1 Update user controler/service
    8.2xxx create GUI to add new user (show info, role, submit form + binding data) (not done)
9. Endcode User password (Lec29)
    - Bcrypt pass endcoder by Spring securit
    - Config Spring security / endcoder test /
    - update create user function (use passendcoder bean and disable http csrf for postman test)
10. Check Uniqueness of User Email (Lec 30)
    - invoke checkDuplicate method in controller and service
    - Code get User by email (rest/controler)
    -xxx Code Ajax call (not done)
11. Use fontawesome for icon (not done)
12. Update user function
 -xxx update user_form /edit user form (not done)
 - find user before update
 - update save() method (change user password if not blank)
 - update isEmailUnique (in edit mode)
 - update save with encode in edit mode
13. Delete user function (lec 33)
    - count and delete
    - add button delete in list user (not done)
    - add confirm message on GUI (not done)
14. Update user Enabled status (lec 34)
    - update repo, service and controller(include rest)
    -xxx update GUI for update status (not done)
