step by step:
1.Cretate CartItem table and entity
2.Create CartItem Repo (JPA interface)
 -findByCustomer
3.ShoppingCart service
 -add/remove/updateQuantity product to cart via customer
4.Shopping CartController/RestController

curl with verbose mode on:
GET curl -v http://localhost:8080/shopmeadmin/rest/users
curl 'https://til.hashrocket.com/api/developer_posts.json?username=gabrielreis' | json_pp -> pretty json
POST with request body (in linux replace '^' by '\'
curl -d "{\"email\":\"testcurl@yahoo.com\",\"password\":\"4444\",\"firstName\":\"abc\",\"lastName\":\"xyz\"}" -H "Content-Type: application/json" ^
    http://localhost:8080/shopmeadmin/rest/users/save
DELETE curl -X DELETE http://localhost:8080/shopmeadmin/rest/users/delete/9

@Modify?
concat in SQL?
HttpServletResponse?
authorizeRequests.usernameparameter???
@AuthenticationPrincipal?

Step:
1.Create root project as maven(gradle project)
2.Create ShopmeCommon project with spring init (JPA) and set module to root project (library project)
3.Create shopme-web-parent project - common dependencies between BE and FE (spring-web)
    3.1 Create shopme backend
    - set parent project by group/atifart/version of web-parent
    3.2 Create shopme frontend
    - set relative path if have error
4. Create Admin Home Page (GUI)
5. Role entity, role repo and unit test
    5.1. Add shopcommon as dependency to web-parent
6. User entity, User repo and unit test
    6.3 create user with 2 roles
    6.4 overridde hashCode and equals of Roles to avoid add the same role to Set
7. Create User Listing function (lecture 27)
    7.1 Create controller/service
    curl -v http://localhost:8080/shopmeadmin/rest/users
    7.2 Create GUI
8. Create New User Function (lecture 28)
    8.1 Update user controler/service
    8.2 create GUI to add new user (show info, role, submit form + binding data)
9. Endcode User password (Lec29)
    - Bcrypt pass endcoder by Spring securit
    - Config Spring security / endcoder test /
    - update create user function (use passendcoder bean and disable http csrf for postman test)
10. Check Uniqueness of User Email (Lec 30)
    - invoke checkDuplicate method in controller and service
    - Code get User by email (rest/controler)
    -xxx Code Ajax call (not done)
11. Use fontawesome for icon (not done)
12. Update user function
 -xxx update user_form /edit user form (not done)
 - find user before update
 - update save() method (change user password if not blank)
 - update isEmailUnique (in edit mode)
 - update save with encode in edit mode
13. Delete user function (lec 33)
    - count and delete
    - add button delete in list user (not done)
    - add confirm message on GUI (not done)
14. Update user Enabled status (lec 34)
    - update repo, service and controller(include rest)
    -xxx update GUI for update status (not done)
15. Photos upload
    - update form to enanble file upload and show img thumb -> update controller also
    - File upload util to store upload file
    - Update usercontroller to save image
    - Config Spring to expose UserPhotos directory + update listing page to show image
    - update photo when edit / check and clean user id directory
16. Code paging (Lec 37)
    - extend and update user service list user by page number
    - update controller/restController to return first page and paging
    - update GUI for pagination
17. Sorting function
    - enable sorting in userservice/cotroller
    - update GUI for sort clickable
18. Filter function (lec 39) - should work with pagination
    - Searchable : id, email, first/last name
    - full name will sear first+last name
    - update repo/service for search query and input keyword + user controller for url
19. Refactor code #1
    - User thymeleaf fragments
    - Show only the affected user after creating & updating a user
20. export csv
    - add href for export csv
    - add csv export function for controller
    - add exporter/csv writter
21. export excel
    - add href for export excel
    - add excel export function for controller
    - add Apache POI excel lib
SECTION 2: User authentication
48. User login page
    - enable security (websecurityconfig)
    - configre customlogin page follow websecurity
    - create ShopmeUserDetails impl UserDetails (of MVC) to load User
    - create UserDetailService to perform authentication (implement from UserDetailsService -of MVC)
50. show user full name and logout
51. code logout function
    - Spring Security require logiout must send in POST
    - prevent CSRF attack (cross site request forgery)
52. Refactor code 2
    - Create thymeleaf for page head, navigation and footer
    - Move common javascript to common.js
53. Enable remember me
    - set checkbox name is-match "remember-me" -> spring will autoconfig to extend cookies
    - jsesson expired when browser end then need to extend in confige by http security
    - create specified session key (allow cookies survive) to avoid relogin after re-run
54. Update Account Details
    - update user_form for edit account detail
    - Create new controller (account) for update user detail
    - update userservice also
    - validate re-enter password
55 .keynote
    - every post request must include _csrf token -> prevent cross site request forgery attack
    - update csrf send for post check email in create user and update user
58. Authorization basic
    - user Spring security api (hasRole()/anyRole() can access anyMatch().)
    - show user and roles in homepage
    - implement authorization
59. Code refactor #3
60. Show custom error page
    - user friendly error massage
    - make ui of error pages match ui of the application
    - crate html custom error page (must be named: "error.html")
62. Config logging for shopme admin
    - config log in application.properties -> logging.level.root
    - specified log file -> logging.file.name=
    - configure rolling file logging
    - write java code logging
    - can see more in code java youtube channel
SECTION: CATEGORY MANAGEMENT
65. Category entity and repository
66. Create category unit test
67. Exercise Write internal code for listing categories
    - create gui for categories
    - create controller/service to list categories (/categories)
    - config security for admin/editor can view category
68. Code category form
    - create category form gui
    - update controller to forward create form
    - update service to get parent cat
69. Code category function
    - add function to add new categories
70. List categories in Hierarchical form
    - update repository to get root and list of sub cats
71. Exercise Update Category function
    - image not required (no upload, do nothing with cur image)
    - new image upload, delete old image
72. Check Uniqueness of Category
    - Name and alias must be unique
    - update catrestcontroller to check
    - update repo to findByname and alias + test
    - update form and controller -> call rest web service using jquery and show modal dialog
73. Sort category
    - sort by name asc desc
    - sort and show by hierarchical (sub category)
74.75 update status
    - delete by catId
    - count first, if > 0 then delete
    - only category have now children can be delete
    - also delete the category image directory
    - move common code into common_list.js
    - move modal dialog into thymeleaf fragment
76. Pagination for category
77. Filter function
    - Search result do not show cat in hierarchical form
    - Work well with sorting and paging
81. refactor code #4
=======================
83. Add Brand entity and brand repository
84. BrandRepo test
85. Listing Brand
    - Config Spring security -> only admin and editors can manage brands
    - Create BrandService/BrandController/brandHtmlGui